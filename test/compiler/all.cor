
use '../utils'

shouldNotThrowList = (
    'compiler/empty_program',

    'compiler/single_decl',
    'compiler/single_decl_wraped_by_spaces',

    'compiler/single_func',
    'compiler/many_funcs',
    'compiler/type_assert',

    'compiler/classes',
    'compiler/slices',
    'compiler/incdec_stmt',
    'compiler/call_expr',
    'compiler/index_expr',
    'compiler/obj_constructors',
    'compiler/array_constructors',
    'compiler/strings',
    'compiler/lambda',
    'compiler/assignment',
    'compiler/coalesce_expr',

    'compiler/for_stmt',
    'compiler/for_in_stmt',
    'compiler/for_in_range_stmt',
    'compiler/if_stmt',
    'compiler/switch_stmt',
    'compiler/use_stmt',
    'compiler/catch_error_stmt',
    
    'compiler/existential_op',
    'compiler/template',
    'compiler/regex',

    'compiler/keyword_as_property',
)

shouldThrowList = (
    'compiler/module_members_with_equal_name1',
    'compiler/module_members_with_equal_name2',
    'compiler/incorrect_nameless_functions_use',

    'compiler/wrong_incdec_used_as_expr',

    'compiler/super_call_autside_method',
    
    'compiler/wrong_existential_op',
    'compiler/wrong_regex',
)

func getNotThrowExpectation(filename) func() {
    expect(utils.fileCompiler(filename)).not.toThrow()
}

func getThrowExpectation(filename) func() {
    expect(utils.fileCompiler(filename)).toThrow()
}

func getSpec(filename) filename.split('/').pop()

func init() {
    describe('Compiler', func() {

        describe('Should not throw while compiling', func(){
            for filename in shouldNotThrowList {
                it(getSpec(filename), getNotThrowExpectation(filename))
            }
        })


        describe('Should throw while compiling', func(){
            for filename in shouldThrowList {
                it(getSpec(filename), getThrowExpectation(filename))
            }
        })

    })

}
