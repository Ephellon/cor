func Client(name, age) {
    this.name = name
    this.age  = age
}

Client.prototype.manuallyInsertedInPrototype = 'foo'

class DAO {

}

class AccountDAO : DAO {

}

func init() {

    describe('CRL', func() {
        
        describe('keys', func(){
            it('From Arrays should extract just numeric indexes', func() {
                arr = ('mango', 'orange', 'guava')
                arr.someProp = 'Foo'

                keys = CRL.keys(arr)
                expect(keys).toEqual((0, 1, 2))
                expect(keys.someProp).toBeUndefined()
            })

            it('From Objects should not extract property names of prototype', func() {
                c = &Client

                keys = CRL.keys(c)
                expect(keys).toEqual(('name', 'age'))
                expect(keys).not.toContain('manuallyInsertedInPrototype')
            })
        })

        describe('assertType', func(){
            describe('Should work for classes', func() {

                account = &AccountDAO

                it('When is direct instance', func() {
                    expect(CRL.assertType(account, AccountDAO)).toBeTruthy()
                })

                it('When is a subclass', func() {
                    expect(CRL.assertType(account, AccountDAO)).toBeTruthy()
                    expect(CRL.assertType(account, DAO)).toBeTruthy()
                })

                it('When is native type', func() {
                    expect(CRL.assertType(account, Object)).toBeTruthy()
                    expect(CRL.assertType('', String)).toBeTruthy()
                })

            })

            describe('Should work for non Cor classes', func() {

                c = &Client

                it('When is direct instance', func() {
                    expect(CRL.assertType(c, Client)).toBeTruthy()
                    expect(CRL.assertType(c, AccountDAO)).toBeFalsy()
                })

                it('When is native type', func() {
                    expect(CRL.assertType(c, Object)).toBeTruthy()
                })

            })
        })

    })

}