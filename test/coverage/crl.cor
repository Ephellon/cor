func Client(name, age) {
    this.name = name
    this.age  = age
}

Client.prototype.manuallyInsertedInPrototype = 'foo'

class DAO {

}

class AccountDAO : DAO {

}

func init() {

    describe('CRL', func() {

        describe('create', func() {
            it('Should work withs arguments', func() {
                c = CRL.create(Client, 'Yosbel', 28)

                expect(c.name).toBe('Yosbel')
                expect(c.age).toBe(28)
            })

            it('Should work withs no arguments', func() {
                c = CRL.create(Client)

                expect(c.name).toBeUndefined()
                expect(c.age).toBeUndefined()
            })
        })
        
        describe('keys', func(){
            it('From Arrays should extract just numeric indexes', func() {
                arr = ('mango', 'orange', 'guava')
                arr.someProp = 'Foo'

                keys = CRL.keys(arr)
                expect(keys).toEqual((0, 1, 2))
                expect(keys.someProp).toBeUndefined()
            })

            it('From Objects should not extract property names of prototype', func() {
                c = &Client

                keys = CRL.keys(c)
                expect(keys).toEqual(('name', 'age'))
                expect(keys).not.toContain('manuallyInsertedInPrototype')
            })
        })

        describe('assertType', func(){
            describe('Should work for classes', func() {

                account = &AccountDAO

                it('When is direct instance', func() {
                    expect(CRL.assertType(account, AccountDAO)).toBeTruthy()
                })

                it('When is a subclass', func() {
                    expect(CRL.assertType(account, AccountDAO)).toBeTruthy()
                    expect(CRL.assertType(account, DAO)).toBeTruthy()
                })

                it('When is native type', func() {
                    expect(CRL.assertType(account, Object)).toBeTruthy()
                    expect(CRL.assertType('', String)).toBeTruthy()
                })

            })

            describe('Should work for non Cor classes', func() {

                c = &Client

                it('When is direct instance', func() {
                    expect(CRL.assertType(c, Client)).toBeTruthy()
                    expect(CRL.assertType(c, AccountDAO)).toBeFalsy()
                })

                it('When is native type', func() {
                    expect(CRL.assertType(c, Object)).toBeTruthy()
                })

            })
        })

        describe('Receive Operator', func() {

            it('Should transform objects to promise', func() {
                prom = CRL.receive((:))
                expect(prom.(CRL.Promise)).toBe(true)
            })

            it('Should transform array to promise', func() {
                prom = CRL.receive((,))
                expect(prom.(CRL.Promise)).toBe(true)
            })

            it('Should passthrough promises', func() {
                prom = CRL.receive(&CRL.Promise(func(x)x))
                expect(prom.(CRL.Promise)).toBe(true)
            })

            it('Should return every else', func() {
                val = CRL.receive(0)
                expect(val).toBe(0)
            })

            it('Should delegate to `receive` function if object (receive:func()) is given', func() {
                obj = (receive: func() 0)
                val = CRL.receive(obj)
                expect(val).toBe(0)
            })

        })

        describe('Send Operator', func() {

            it('Should delegate to `send` function if object (send:func()) is given', func() {
                val = 0
                obj = (send: func(s) val = s)
                CRL.send(obj, 1)
                expect(val).toBe(1)
            })

            it('Should throw otherwise', func(){
                func send() CRL.send((:), 1)
                expect(send).toThrow()
            })
        })

    })

}