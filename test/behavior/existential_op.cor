
arr = [
    func() true,
    func() true,
]

obj = &[arr: arr, fn: func() true, ok: true]

func fn() { return true }


func init() {
    describe('Existential Operator', func() {
        
        describe('For unary expressions', func() {
            it('Should work for simple call', func() {
                expect(obj?).toBeTruthy()
                expect(undefObj?).toBeUndefined()
            })
            
            it('Should work for expressions', func() {
                expect(obj.fn()?).toBe(true)
                expect(arr[0]()?).toBe(true)
                expect(obj.nfn?).toBeUndefined()
            })    
        })


        describe('For call', func() {
            it('Should work if simple call', func() {
                expect(fn?()).toBe(true)
                expect(undefFn?()).toBeUndefined()
            })
            
            it('Should work if expressions', func() {
                expect(obj.fn?()).toBe(true)
                expect(arr[0]?()).toBe(true)
                expect(obj.nfn?()).toBeUndefined()
            })    
        })

        
        describe('For selector', func() {
            it('Should work if simple selector', func() {
                expect(obj?.ok).toBe(true)
                expect(obj?.nok).toBeUndefined()
            })
            
            it('Should work if selector expressions', func() {
                expect(obj.arr?.length).toBe(2)
            })
        })

        
        describe('For index', func() {
            it('Should work if simple index', func() {
                expect(arr?[0]()).toBe(true)
                expect(obj?[3]).toBeUndefined()
            })
            
            it('Should work if index expressions', func() {
                expect(obj.arr?[0]()).toBe(true)
            })
        })
        
        describe('For slice', func() {
            it('Should work if simple slice', func() {
                expect(arr?[:].length).toBe(2)
                expect(arr?[4:5]).toEqual([])
            })
            
            it('Should work if index expressions', func() {
                expect(obj.arr?[:]).toEqual(arr)
            })
        })
        
        
        describe('In operantions', func() {
            a = &[b: &[c: 0]]
            
            it('Should work in operation', func() {
                expect(a?.b.c + 1).toBe(1)
            })
            
            it('Should work in plusequal', func() {
                a?.b.c += 1
                expect(a.b.c).toBe(1)
            })
            
            it('Should work in inc-dec statement', func() {
                a?.b.c++
                expect(a.b.c).toBe(2)
            })
            
        })

    })
}
