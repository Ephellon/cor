class Emitter {
    isEmitter = true
    active    = true
}

class Person {
    func init(name, age) {
        me.name      = name
        me.age       = age
        me.hairColor = 'black'
    }
}

class Client : Person {
    name
    age
}


class ClientA : Client {

}

class ClientB : Emitter  {
    name
    age
}

class ClientC : ClientA {
    func init(name, age) {
        super((name: name, age: age, _conf: true))
    }
}

func init() {

    describe('Class Initializer', func(){
        
        p  = &Person('peter', 10)
        c  = &Client('gladys', 50)
        ca = &ClientA(name: 'gleidys', age: 25)
        cb = &ClientB('emanuel', 18)
        cc = &ClientC('lliliam', 28)

        it('Should replace default constructor behavior', func() {
            expect(p.name).toBe('peter')
            expect(p.age).toBe(10)
        })

        it('Should keep default values', func() {
            expect(p.hairColor).toBe('black')
        })

        it('Should has default inherited values', func() {
            expect(c.name).toBe('gladys')
            expect(c.hairColor).toBe('black')
        })

        it('Should be overridable', func() {

            expect(ca.name).toBe('gleidys')
            expect(ca.age).toBe(25)
        })

        it('Should be inherited by combining', func() {

            expect(cb.name).toBe('emanuel')
            expect(cb.age).toBe(18)
            expect(cb.active).toBe(true)
            expect(cb.isEmitter).toBe(true)
        })


        it('Should be called by "super" builtin function', func() {

            expect(cc.name).toBe('lliliam')
            expect(cc.age).toBe(28)
            expect(cc.hairColor).toBe('black')
        })
    })

}