
func test() {

    describe('Channels', func() {

        it('Should accept transformers', func(done) {
            func transform(x) x*2
            uch = chan(null, transform)
            bch = chan(5, transform)

            // receive first
            go {
                expect(<- uch).toBe(10)
                expect(<- bch).toBe(10)
                done()
            }

            go {
                uch <- 5
                bch <- 5
            }

        })
    })

    describe('Unbuffered channels', func() {

        it('Should behave sending and receving messages synchronously', func(done) {
            func proc(ch, name) go {
                m
                for !ch.closed {
                    m = <- ch
                    m.stack.push(0)       // register receive
                    m.procTick.push(name) // register this execution

                    ch <- m
                    m.stack.push(1) // register send
                }
            }


            (func() go {
                ch  = chan()
                msg = (stack: (,), procTick: (,))

                // send inside another `go` block
                // to don't affect the current coroutine
                go { ch <- msg }

                proc(ch, 0)
                proc(ch, 1)

                timeout(20)
                ch.close()

                // alternate get and send
                expect(msg.stack[1:5]).toEqual((0, 1, 0, 1))

                // altername procs execution
                expect(msg.procTick[0:4]).toEqual((0, 1, 0, 1))
                done()
            })()

        })

    })

    describe('Buffered channels', func() {

        it('Should behave sending and receving messages asynchronously', func(done) {
            arr = (,)

            func procSend(ch) go {
                for !ch.closed {
                    ch <- 0
                    arr.push(0) // register send
                }
            }

            func procReceive(ch) go {
                for !ch.closed {
                    <- ch
                    arr.push(1) // register receive
                }
            }


            (func() go {
                ch = chan(5)

                procSend(ch)
                procReceive(ch)

                timeout(1)
                ch.close()

                expect(arr[0:3]).toEqual((0, 0, 0))
                done()
            })()

        })

    })

}

use '../utils'
func init() {
    utils.testWithPromise(test)
}
